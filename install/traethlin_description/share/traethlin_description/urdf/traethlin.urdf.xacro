<?xml version="1.0"?>

<!-- traethlin.urdf.xacro

This file defines a model of the Traethlin robot.

It is derived from the autorally ROS package available at https://github.com/AutoRally.

Lengths are measured in meters, angles are measured in radians, and masses are
measured in kilograms. All of these values are approximations.

To work with Gazebo, each link must have an inertial element, even if
the link only serves to connect two joints. To be visible in Gazebo, a link
must have a collision element. Furthermore, the link must have a Gazebo
material.
-->
<robot name="traethlin" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:include filename="$(find traethlin_description)/urdf/traethlin_constants.xacro" />
  <xacro:include filename="$(find traethlin_description)/urdf/traethlin_shock_absorbers.xacro" />
  <xacro:include filename="$(find traethlin_description)/urdf/traethlin_wheels.xacro" />
  <xacro:include filename="$(find traethlin_description)/urdf/traethlin.gazebo.xacro" />

  <material name="chassis_mat">
    <color rgba="0.2 0.2 0.2 1"/>
  </material>
  <material name="lightgrey">
    <color rgba="0.8 0.8 0.8 1"/>
  </material>

  <!-- Null inertial element. This is needed to make the model work with
       Gazebo. -->
  <xacro:macro name="null_inertial">
    <inertial>
      <mass value="8e-3"/>
      <inertia ixx="8e-3" ixy="0" ixz="0" iyy="8e-3" iyz="0" izz="8e-3"/>
    </inertial>
  </xacro:macro>


  <!-- Inertia of a thick-walled cylindrical tube with open ends. Height is
       measured along the z axis, which is the tube's axis. inner_rad and
       outer_rad are the tube's inner and outer radii, respectively. Pitch
       MOI is calculated from platform calibration data using bifilar pendulum
       method

       TODO: remove inner_rad
      -->
  <xacro:macro name="thick_walled_tube_inertial"
               params="inner_rad outer_rad height mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia
        ixx="${(mass*(3*outer_rad*outer_rad+height*height))/12}"
        ixy = "0" ixz = "0"
        iyy="${(mass*(3*outer_rad*outer_rad+height*height))/12}"
        iyz = "0"
        izz="${(mass*outer_rad*outer_rad)/2}"/>
      <!--ixx="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               ixy="0" ixz="0"
               iyy="0.0224048079"
               iyz="0"
               izz="${mass * (inner_rad * inner_rad +
                    outer_rad * outer_rad) / 2}"-->
    </inertial>
  </xacro:macro>
  <xacro:macro  name="thick_walled_tube_inertial"
                params="inner_rad outer_rad height mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia
        ixx="${(mass*(3*outer_rad*outer_rad+height*height))/12}"
        ixy = "0" ixz = "0"
        iyy="${(mass*(3*outer_rad*outer_rad+height*height))/12}"
        iyz = "0"
        izz="${mass*outer_rad/2}"/>
      </inertial>
  </xacro:macro>
  <xacro:macro name="solid_cube_inertial"
               params="x y z mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="${mass*(y*y+z*z)/12}"
        ixy = "0" ixz = "0"
        iyy="${mass*(x*x+z*z)/12}"
        iyz = "0"
        izz="${mass*(x*x+y*y)/12}"/>
    </inertial>
  </xacro:macro>

  <!-- base_link must have geometry so that its axes can be displayed in
       rviz. -->
  <link name="base_link">
<!--    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
      <material name="chassis_mat"/>
    </visual>-->
  </link>

  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>

  <!-- Chassis -->
  <link name="chassis_link">
    <visual>
      <!--<origin xyz="${-chassis_length/2 + 0.15} 0 ${-chassis_cm_height}"
              rpy="0 0 0"/>-->
      <origin xyz="${chassis_length_offset} 0 ${chassis_vertical_offset}"
              rpy="0 0 0"/>

      <geometry>
        <mesh filename="file://$(find traethlin_description)/meshes/chassis.stl" scale="0.001 0.001 0.001" />
      </geometry>

      <material name="chassis_mat"/>
    </visual>

    <collision>
      <!--<origin xyz="${-chassis_length/2 + 0.2} 0 ${-chassis_cm_height}"
      rpy="0 0 0"/>-->
      <origin xyz="${chassis_length_offset} 0 ${chassis_vertical_offset}"
              rpy="0 0 0"/>

              <!-- rpy="0 0 0"/> -->

      <geometry>
        <mesh filename="file://$(find traethlin_description)/meshes/chassis.stl" scale="0.001 0.001 0.001" />
      </geometry>
    </collision>

    <xacro:solid_cube_inertial
      x="${chassis_length}"
      y="${chassis_width}"
      z="${chassis_height}"
      mass="${chassis_mass}"/>
  </link>
  <gazebo reference="chassis_link">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>

  <joint name="base_link_to_chasis" type="fixed">
    <origin xyz="0 0 ${chassis_cm_height}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="chassis_link"/>
  </joint>

  <link name="imu_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>

    <xacro:null_inertial/>
  </link>

  <joint name="imu_joint" type="fixed">
    <origin xyz="-0.07 0.00 0.09" rpy="0 0 0"/>
    <parent link="chassis_link"/>
    <child link="imu_link"/>
  </joint>


  <link name="gps_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>

    <xacro:null_inertial/>
  </link>

  <joint name="gps_joint" type="fixed">
    <origin xyz="-0.10 0.0 0.14" rpy="0 0 0"/>
    <parent link="chassis_link"/>
    <child link="gps_link"/>
  </joint>

  <link name="cam_mount_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file://$(find traethlin_description)/meshes/camera_assembly.stl" scale="0.001 0.001 0.001" />
      </geometry>
      <material name="lightgrey"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file://$(find traethlin_description)/meshes/camera_assembly.stl" scale="0.001 0.001 0.001" />
      </geometry>
    </collision>

    <xacro:null_inertial/>
  </link>

  <joint name="cam_mount_joint" type="fixed">
    <origin xyz="-0.19 0 0.04" rpy="0 0 0"/>
    <parent link="chassis_link"/>
    <child link="cam_mount_link"/>

  </joint>

  <joint name="camera_base_joint" type="fixed">
    <origin xyz="0.035 0 0.37" rpy="0 0.40 0"/>
    <parent link="cam_mount_link"/>
    <child link="camera_base"/>
  </joint>

  <!-- Camera -->
  <link name="camera_base">
    <!--<collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="0.03 0.12 0.03"/>
      </geometry>
      <material name="lightgrey"/>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.03 0.12 0.03"/>
      </geometry>
      <material name="lightgrey"/>
    </visual>-->

    <xacro:null_inertial/>

  </link>

  <joint name="thermal_joint" type="fixed">
    <origin xyz="0.20 0 0.07" rpy="0 0 0"/>
    <parent link="chassis_link"/>
    <child link="thermal_link"/>
  </joint>

  <!-- Thermal Camera -->
  <link name="thermal_link">
    <!--<collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="0.03 0.12 0.03"/>
      </geometry>
      <material name="lightgrey"/>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.03 0.12 0.03"/>
      </geometry>
      <material name="lightgrey"/>
    </visual>-->

    <xacro:null_inertial/>

  </link>

<!--
  <joint name="side_camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0 -3 0" rpy="0 0 1.5708"/>
    <parent link="base_link"/>
    <child link="side_camera_base"/>
  </joint>-->

  <!-- Camera -->
  <!--<link name="side_camera_base">-->
    <!-- <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="red"/>
    </visual>
    -->
    <!--<inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>-->
  <!--
  <link name="odom">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
  </collision>
    </link>
  <joint name="odom_joint" type="fixed">
    <axis xyz="0 0 0" />
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <parent link="odom"/>
    <child link="base_link"/>
  </joint>-->

  <!--
  <link name="lidar">
    <xacro:null_inertial/>
  </link>
  <joint name="lidar_joint" type="fixed">
    <origin xyz="0 0 0.1" rpy="0 0 0"/>
    <parent link="chassis"/>
    <child link="lidar"/>
  </joint>
-->

  <!-- Wheels -->
  <xacro:front_wheel lr_prefix="left" fr_prefix="front"
                     lr_reflect="1" fr_reflect="1"
                     tire_width="${front_tire_width}"
                     wheel_mass="${front_wheel_mass}"
                     axle_eff_limit="${front_axle_eff_limit}"/>
  <xacro:front_wheel lr_prefix="right" fr_prefix="front"
                     lr_reflect="-1" fr_reflect="1"
                     tire_width="${front_tire_width}"
                     wheel_mass="${front_wheel_mass}"
                     axle_eff_limit="${front_axle_eff_limit}"/>
  <xacro:rear_wheel lr_prefix="left" fr_prefix="rear"
                    lr_reflect="1" fr_reflect="-1"
                    tire_width="${rear_tire_width}"
                    wheel_mass="${rear_wheel_mass}"
                    axle_eff_limit="${rear_axle_eff_limit}"/>
  <xacro:rear_wheel lr_prefix="right" fr_prefix="rear"
                    lr_reflect="-1" fr_reflect="-1"
                    tire_width="${rear_tire_width}"
                    wheel_mass="${rear_wheel_mass}"
                    axle_eff_limit="${rear_axle_eff_limit}"/>

  <xacro:arg name="use_nominal_extrinsics" default="true"/>
  <xacro:include filename="$(find realsense2_description)/urdf/_d455.urdf.xacro" />

  <xacro:sensor_d455 parent="camera_base" use_nominal_extrinsics="$(arg use_nominal_extrinsics)">
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </xacro:sensor_d455>


  <gazebo>
    <plugin name="gazebo_ros_ackermann_drive"
            filename="libgazebo_ros_ackermann_drive_4wd.so">
      <ros>
        <!-- <namespace>traethlin</namespace> -->
        <remapping>cmd_vel:=cmd_vel</remapping>
        <remapping>odom:=odom</remapping>
        <remapping>distance:=distance</remapping>
      </ros>
      <update_rate>100.0</update_rate>
      <!-- wheels -->
      <front_left_joint>left_front_axle</front_left_joint>
      <front_right_joint>right_front_axle</front_right_joint>
      <rear_left_joint>left_rear_axle</rear_left_joint>
      <rear_right_joint>right_rear_axle</rear_right_joint>
      <left_steering_joint>left_steering_joint</left_steering_joint>
      <right_steering_joint>right_steering_joint</right_steering_joint>
      <steering_wheel_joint></steering_wheel_joint>
      <!-- Max absolute steer angle for tyre in radians-->
      <!-- Any cmd_vel angular z greater than this would be capped -->
      <max_steer>0.7</max_steer>
      <!-- Max absolute steering angle of steering wheel -->
      <max_steering_angle>7.85</max_steering_angle>
      <!-- Max absolute linear speed in m/s -->
      <max_speed>1.5</max_speed>
      <!-- PID tuning -->
      <left_steering_pid_gain>100 20 1</left_steering_pid_gain>
      <left_steering_i_range>0 0</left_steering_i_range>
      <right_steering_pid_gain>100 20 1</right_steering_pid_gain>
      <right_steering_i_range>0 0</right_steering_i_range>
      <linear_velocity_pid_gain>5 1 0</linear_velocity_pid_gain>
      <linear_velocity_i_range>0 0</linear_velocity_i_range>
      <!-- output -->
      <publish_odom>false</publish_odom>
      <publish_odom_tf>false</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <publish_distance>true</publish_distance>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>
</robot>
